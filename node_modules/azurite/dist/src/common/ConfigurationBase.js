"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertOptions = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs"));
const models_1 = require("./models");
var CertOptions;
(function (CertOptions) {
    CertOptions[CertOptions["Default"] = 0] = "Default";
    CertOptions[CertOptions["PEM"] = 1] = "PEM";
    CertOptions[CertOptions["PFX"] = 2] = "PFX";
})(CertOptions = exports.CertOptions || (exports.CertOptions = {}));
class ConfigurationBase {
    constructor(host, port, enableAccessLog = false, accessLogWriteStream, enableDebugLog = false, debugLogFilePath, loose = false, skipApiVersionCheck = false, cert = "", key = "", pwd = "", oauth, disableProductStyleUrl = false) {
        this.host = host;
        this.port = port;
        this.enableAccessLog = enableAccessLog;
        this.accessLogWriteStream = accessLogWriteStream;
        this.enableDebugLog = enableDebugLog;
        this.debugLogFilePath = debugLogFilePath;
        this.loose = loose;
        this.skipApiVersionCheck = skipApiVersionCheck;
        this.cert = cert;
        this.key = key;
        this.pwd = pwd;
        this.oauth = oauth;
        this.disableProductStyleUrl = disableProductStyleUrl;
    }
    hasCert() {
        if (this.cert.length > 0 && this.key.length > 0) {
            return CertOptions.PEM;
        }
        if (this.cert.length > 0 && this.pwd.toString().length > 0) {
            return CertOptions.PFX;
        }
        return CertOptions.Default;
    }
    getCert(option) {
        switch (option) {
            case CertOptions.PEM:
                return {
                    cert: fs.readFileSync(this.cert),
                    key: fs.readFileSync(this.key)
                };
            case CertOptions.PFX:
                return {
                    pfx: fs.readFileSync(this.cert),
                    passphrase: this.pwd.toString()
                };
            default:
                return null;
        }
    }
    getOAuthLevel() {
        if (this.oauth) {
            if (this.oauth.toLowerCase() === "basic") {
                return models_1.OAuthLevel.BASIC;
            }
        }
        return;
    }
    getHttpServerAddress() {
        return `http${this.hasCert() === CertOptions.Default ? "" : "s"}://${this.host}:${this.port}`;
    }
}
exports.default = ConfigurationBase;
//# sourceMappingURL=ConfigurationBase.js.map