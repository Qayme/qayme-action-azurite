"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncCopyStatusType = exports.AccountKind = exports.SkuName = exports.SequenceNumberActionType = exports.PathRenameMode = exports.ListContainersIncludeType = exports.ListBlobsIncludeItem = exports.EncryptionAlgorithmType = exports.DeleteSnapshotsOptionType = exports.BlockListType = exports.PageBlobAccessTier = exports.RehydratePriority = exports.GeoReplicationStatusType = exports.StorageErrorCode = exports.BlobType = exports.ArchiveStatus = exports.AccessTier = exports.LeaseStatusType = exports.LeaseStateType = exports.LeaseDurationType = exports.CopyStatusType = exports.PublicAccessType = void 0;
/**
 * Defines values for PublicAccessType.
 * Possible values include: 'container', 'blob'
 * @readonly
 * @enum {string}
 */
var PublicAccessType;
(function (PublicAccessType) {
    PublicAccessType["Container"] = "container";
    PublicAccessType["Blob"] = "blob";
})(PublicAccessType = exports.PublicAccessType || (exports.PublicAccessType = {}));
/**
 * Defines values for CopyStatusType.
 * Possible values include: 'pending', 'success', 'aborted', 'failed'
 * @readonly
 * @enum {string}
 */
var CopyStatusType;
(function (CopyStatusType) {
    CopyStatusType["Pending"] = "pending";
    CopyStatusType["Success"] = "success";
    CopyStatusType["Aborted"] = "aborted";
    CopyStatusType["Failed"] = "failed";
})(CopyStatusType = exports.CopyStatusType || (exports.CopyStatusType = {}));
/**
 * Defines values for LeaseDurationType.
 * Possible values include: 'infinite', 'fixed'
 * @readonly
 * @enum {string}
 */
var LeaseDurationType;
(function (LeaseDurationType) {
    LeaseDurationType["Infinite"] = "infinite";
    LeaseDurationType["Fixed"] = "fixed";
})(LeaseDurationType = exports.LeaseDurationType || (exports.LeaseDurationType = {}));
/**
 * Defines values for LeaseStateType.
 * Possible values include: 'available', 'leased', 'expired', 'breaking', 'broken'
 * @readonly
 * @enum {string}
 */
var LeaseStateType;
(function (LeaseStateType) {
    LeaseStateType["Available"] = "available";
    LeaseStateType["Leased"] = "leased";
    LeaseStateType["Expired"] = "expired";
    LeaseStateType["Breaking"] = "breaking";
    LeaseStateType["Broken"] = "broken";
})(LeaseStateType = exports.LeaseStateType || (exports.LeaseStateType = {}));
/**
 * Defines values for LeaseStatusType.
 * Possible values include: 'locked', 'unlocked'
 * @readonly
 * @enum {string}
 */
var LeaseStatusType;
(function (LeaseStatusType) {
    LeaseStatusType["Locked"] = "locked";
    LeaseStatusType["Unlocked"] = "unlocked";
})(LeaseStatusType = exports.LeaseStatusType || (exports.LeaseStatusType = {}));
/**
 * Defines values for AccessTier.
 * Possible values include: 'P4', 'P6', 'P10', 'P15', 'P20', 'P30', 'P40', 'P50', 'P60', 'P70',
 * 'P80', 'Hot', 'Cool', 'Archive'
 * @readonly
 * @enum {string}
 */
var AccessTier;
(function (AccessTier) {
    AccessTier["P4"] = "P4";
    AccessTier["P6"] = "P6";
    AccessTier["P10"] = "P10";
    AccessTier["P15"] = "P15";
    AccessTier["P20"] = "P20";
    AccessTier["P30"] = "P30";
    AccessTier["P40"] = "P40";
    AccessTier["P50"] = "P50";
    AccessTier["P60"] = "P60";
    AccessTier["P70"] = "P70";
    AccessTier["P80"] = "P80";
    AccessTier["Hot"] = "Hot";
    AccessTier["Cool"] = "Cool";
    AccessTier["Archive"] = "Archive";
})(AccessTier = exports.AccessTier || (exports.AccessTier = {}));
/**
 * Defines values for ArchiveStatus.
 * Possible values include: 'rehydrate-pending-to-hot', 'rehydrate-pending-to-cool'
 * @readonly
 * @enum {string}
 */
var ArchiveStatus;
(function (ArchiveStatus) {
    ArchiveStatus["RehydratePendingToHot"] = "rehydrate-pending-to-hot";
    ArchiveStatus["RehydratePendingToCool"] = "rehydrate-pending-to-cool";
})(ArchiveStatus = exports.ArchiveStatus || (exports.ArchiveStatus = {}));
/**
 * Defines values for BlobType.
 * Possible values include: 'BlockBlob', 'PageBlob', 'AppendBlob'
 * @readonly
 * @enum {string}
 */
var BlobType;
(function (BlobType) {
    BlobType["BlockBlob"] = "BlockBlob";
    BlobType["PageBlob"] = "PageBlob";
    BlobType["AppendBlob"] = "AppendBlob";
})(BlobType = exports.BlobType || (exports.BlobType = {}));
/**
 * Defines values for StorageErrorCode.
 * Possible values include: 'AccountAlreadyExists', 'AccountBeingCreated', 'AccountIsDisabled',
 * 'AuthenticationFailed', 'ConditionHeadersNotSupported', 'ConditionNotMet', 'EmptyMetadataKey',
 * 'InsufficientAccountPermissions', 'InternalError', 'InvalidAuthenticationInfo',
 * 'InvalidHeaderValue', 'InvalidHttpVerb', 'InvalidInput', 'InvalidMd5', 'InvalidMetadata',
 * 'InvalidQueryParameterValue', 'InvalidRange', 'InvalidResourceName', 'InvalidUri',
 * 'InvalidXmlDocument', 'InvalidXmlNodeValue', 'Md5Mismatch', 'MetadataTooLarge',
 * 'MissingContentLengthHeader', 'MissingRequiredQueryParameter', 'MissingRequiredHeader',
 * 'MissingRequiredXmlNode', 'MultipleConditionHeadersNotSupported', 'OperationTimedOut',
 * 'OutOfRangeInput', 'OutOfRangeQueryParameterValue', 'RequestBodyTooLarge',
 * 'ResourceTypeMismatch', 'RequestUrlFailedToParse', 'ResourceAlreadyExists', 'ResourceNotFound',
 * 'ServerBusy', 'UnsupportedHeader', 'UnsupportedXmlNode', 'UnsupportedQueryParameter',
 * 'UnsupportedHttpVerb', 'AppendPositionConditionNotMet', 'BlobAlreadyExists', 'BlobNotFound',
 * 'BlobOverwritten', 'BlobTierInadequateForContentLength', 'BlockCountExceedsLimit',
 * 'BlockListTooLong', 'CannotChangeToLowerTier', 'CannotVerifyCopySource',
 * 'ContainerAlreadyExists', 'ContainerBeingDeleted', 'ContainerDisabled', 'ContainerNotFound',
 * 'ContentLengthLargerThanTierLimit', 'CopyAcrossAccountsNotSupported', 'CopyIdMismatch',
 * 'FeatureVersionMismatch', 'IncrementalCopyBlobMismatch',
 * 'IncrementalCopyOfEralierVersionSnapshotNotAllowed', 'IncrementalCopySourceMustBeSnapshot',
 * 'InfiniteLeaseDurationRequired', 'InvalidBlobOrBlock', 'InvalidBlobTier', 'InvalidBlobType',
 * 'InvalidBlockId', 'InvalidBlockList', 'InvalidOperation', 'InvalidPageRange',
 * 'InvalidSourceBlobType', 'InvalidSourceBlobUrl', 'InvalidVersionForPageBlobOperation',
 * 'LeaseAlreadyPresent', 'LeaseAlreadyBroken', 'LeaseIdMismatchWithBlobOperation',
 * 'LeaseIdMismatchWithContainerOperation', 'LeaseIdMismatchWithLeaseOperation', 'LeaseIdMissing',
 * 'LeaseIsBreakingAndCannotBeAcquired', 'LeaseIsBreakingAndCannotBeChanged',
 * 'LeaseIsBrokenAndCannotBeRenewed', 'LeaseLost', 'LeaseNotPresentWithBlobOperation',
 * 'LeaseNotPresentWithContainerOperation', 'LeaseNotPresentWithLeaseOperation',
 * 'MaxBlobSizeConditionNotMet', 'NoPendingCopyOperation',
 * 'OperationNotAllowedOnIncrementalCopyBlob', 'PendingCopyOperation',
 * 'PreviousSnapshotCannotBeNewer', 'PreviousSnapshotNotFound',
 * 'PreviousSnapshotOperationNotSupported', 'SequenceNumberConditionNotMet',
 * 'SequenceNumberIncrementTooLarge', 'SnapshotCountExceeded', 'SnaphotOperationRateExceeded',
 * 'SnapshotsPresent', 'SourceConditionNotMet', 'SystemInUse', 'TargetConditionNotMet',
 * 'UnauthorizedBlobOverwrite', 'BlobBeingRehydrated', 'BlobArchived', 'BlobNotArchived'
 * @readonly
 * @enum {string}
 */
var StorageErrorCode;
(function (StorageErrorCode) {
    StorageErrorCode["AccountAlreadyExists"] = "AccountAlreadyExists";
    StorageErrorCode["AccountBeingCreated"] = "AccountBeingCreated";
    StorageErrorCode["AccountIsDisabled"] = "AccountIsDisabled";
    StorageErrorCode["AuthenticationFailed"] = "AuthenticationFailed";
    StorageErrorCode["ConditionHeadersNotSupported"] = "ConditionHeadersNotSupported";
    StorageErrorCode["ConditionNotMet"] = "ConditionNotMet";
    StorageErrorCode["EmptyMetadataKey"] = "EmptyMetadataKey";
    StorageErrorCode["InsufficientAccountPermissions"] = "InsufficientAccountPermissions";
    StorageErrorCode["InternalError"] = "InternalError";
    StorageErrorCode["InvalidAuthenticationInfo"] = "InvalidAuthenticationInfo";
    StorageErrorCode["InvalidHeaderValue"] = "InvalidHeaderValue";
    StorageErrorCode["InvalidHttpVerb"] = "InvalidHttpVerb";
    StorageErrorCode["InvalidInput"] = "InvalidInput";
    StorageErrorCode["InvalidMd5"] = "InvalidMd5";
    StorageErrorCode["InvalidMetadata"] = "InvalidMetadata";
    StorageErrorCode["InvalidQueryParameterValue"] = "InvalidQueryParameterValue";
    StorageErrorCode["InvalidRange"] = "InvalidRange";
    StorageErrorCode["InvalidResourceName"] = "InvalidResourceName";
    StorageErrorCode["InvalidUri"] = "InvalidUri";
    StorageErrorCode["InvalidXmlDocument"] = "InvalidXmlDocument";
    StorageErrorCode["InvalidXmlNodeValue"] = "InvalidXmlNodeValue";
    StorageErrorCode["Md5Mismatch"] = "Md5Mismatch";
    StorageErrorCode["MetadataTooLarge"] = "MetadataTooLarge";
    StorageErrorCode["MissingContentLengthHeader"] = "MissingContentLengthHeader";
    StorageErrorCode["MissingRequiredQueryParameter"] = "MissingRequiredQueryParameter";
    StorageErrorCode["MissingRequiredHeader"] = "MissingRequiredHeader";
    StorageErrorCode["MissingRequiredXmlNode"] = "MissingRequiredXmlNode";
    StorageErrorCode["MultipleConditionHeadersNotSupported"] = "MultipleConditionHeadersNotSupported";
    StorageErrorCode["OperationTimedOut"] = "OperationTimedOut";
    StorageErrorCode["OutOfRangeInput"] = "OutOfRangeInput";
    StorageErrorCode["OutOfRangeQueryParameterValue"] = "OutOfRangeQueryParameterValue";
    StorageErrorCode["RequestBodyTooLarge"] = "RequestBodyTooLarge";
    StorageErrorCode["ResourceTypeMismatch"] = "ResourceTypeMismatch";
    StorageErrorCode["RequestUrlFailedToParse"] = "RequestUrlFailedToParse";
    StorageErrorCode["ResourceAlreadyExists"] = "ResourceAlreadyExists";
    StorageErrorCode["ResourceNotFound"] = "ResourceNotFound";
    StorageErrorCode["ServerBusy"] = "ServerBusy";
    StorageErrorCode["UnsupportedHeader"] = "UnsupportedHeader";
    StorageErrorCode["UnsupportedXmlNode"] = "UnsupportedXmlNode";
    StorageErrorCode["UnsupportedQueryParameter"] = "UnsupportedQueryParameter";
    StorageErrorCode["UnsupportedHttpVerb"] = "UnsupportedHttpVerb";
    StorageErrorCode["AppendPositionConditionNotMet"] = "AppendPositionConditionNotMet";
    StorageErrorCode["BlobAlreadyExists"] = "BlobAlreadyExists";
    StorageErrorCode["BlobNotFound"] = "BlobNotFound";
    StorageErrorCode["BlobOverwritten"] = "BlobOverwritten";
    StorageErrorCode["BlobTierInadequateForContentLength"] = "BlobTierInadequateForContentLength";
    StorageErrorCode["BlockCountExceedsLimit"] = "BlockCountExceedsLimit";
    StorageErrorCode["BlockListTooLong"] = "BlockListTooLong";
    StorageErrorCode["CannotChangeToLowerTier"] = "CannotChangeToLowerTier";
    StorageErrorCode["CannotVerifyCopySource"] = "CannotVerifyCopySource";
    StorageErrorCode["ContainerAlreadyExists"] = "ContainerAlreadyExists";
    StorageErrorCode["ContainerBeingDeleted"] = "ContainerBeingDeleted";
    StorageErrorCode["ContainerDisabled"] = "ContainerDisabled";
    StorageErrorCode["ContainerNotFound"] = "ContainerNotFound";
    StorageErrorCode["ContentLengthLargerThanTierLimit"] = "ContentLengthLargerThanTierLimit";
    StorageErrorCode["CopyAcrossAccountsNotSupported"] = "CopyAcrossAccountsNotSupported";
    StorageErrorCode["CopyIdMismatch"] = "CopyIdMismatch";
    StorageErrorCode["FeatureVersionMismatch"] = "FeatureVersionMismatch";
    StorageErrorCode["IncrementalCopyBlobMismatch"] = "IncrementalCopyBlobMismatch";
    StorageErrorCode["IncrementalCopyOfEralierVersionSnapshotNotAllowed"] = "IncrementalCopyOfEralierVersionSnapshotNotAllowed";
    StorageErrorCode["IncrementalCopySourceMustBeSnapshot"] = "IncrementalCopySourceMustBeSnapshot";
    StorageErrorCode["InfiniteLeaseDurationRequired"] = "InfiniteLeaseDurationRequired";
    StorageErrorCode["InvalidBlobOrBlock"] = "InvalidBlobOrBlock";
    StorageErrorCode["InvalidBlobTier"] = "InvalidBlobTier";
    StorageErrorCode["InvalidBlobType"] = "InvalidBlobType";
    StorageErrorCode["InvalidBlockId"] = "InvalidBlockId";
    StorageErrorCode["InvalidBlockList"] = "InvalidBlockList";
    StorageErrorCode["InvalidOperation"] = "InvalidOperation";
    StorageErrorCode["InvalidPageRange"] = "InvalidPageRange";
    StorageErrorCode["InvalidSourceBlobType"] = "InvalidSourceBlobType";
    StorageErrorCode["InvalidSourceBlobUrl"] = "InvalidSourceBlobUrl";
    StorageErrorCode["InvalidVersionForPageBlobOperation"] = "InvalidVersionForPageBlobOperation";
    StorageErrorCode["LeaseAlreadyPresent"] = "LeaseAlreadyPresent";
    StorageErrorCode["LeaseAlreadyBroken"] = "LeaseAlreadyBroken";
    StorageErrorCode["LeaseIdMismatchWithBlobOperation"] = "LeaseIdMismatchWithBlobOperation";
    StorageErrorCode["LeaseIdMismatchWithContainerOperation"] = "LeaseIdMismatchWithContainerOperation";
    StorageErrorCode["LeaseIdMismatchWithLeaseOperation"] = "LeaseIdMismatchWithLeaseOperation";
    StorageErrorCode["LeaseIdMissing"] = "LeaseIdMissing";
    StorageErrorCode["LeaseIsBreakingAndCannotBeAcquired"] = "LeaseIsBreakingAndCannotBeAcquired";
    StorageErrorCode["LeaseIsBreakingAndCannotBeChanged"] = "LeaseIsBreakingAndCannotBeChanged";
    StorageErrorCode["LeaseIsBrokenAndCannotBeRenewed"] = "LeaseIsBrokenAndCannotBeRenewed";
    StorageErrorCode["LeaseLost"] = "LeaseLost";
    StorageErrorCode["LeaseNotPresentWithBlobOperation"] = "LeaseNotPresentWithBlobOperation";
    StorageErrorCode["LeaseNotPresentWithContainerOperation"] = "LeaseNotPresentWithContainerOperation";
    StorageErrorCode["LeaseNotPresentWithLeaseOperation"] = "LeaseNotPresentWithLeaseOperation";
    StorageErrorCode["MaxBlobSizeConditionNotMet"] = "MaxBlobSizeConditionNotMet";
    StorageErrorCode["NoPendingCopyOperation"] = "NoPendingCopyOperation";
    StorageErrorCode["OperationNotAllowedOnIncrementalCopyBlob"] = "OperationNotAllowedOnIncrementalCopyBlob";
    StorageErrorCode["PendingCopyOperation"] = "PendingCopyOperation";
    StorageErrorCode["PreviousSnapshotCannotBeNewer"] = "PreviousSnapshotCannotBeNewer";
    StorageErrorCode["PreviousSnapshotNotFound"] = "PreviousSnapshotNotFound";
    StorageErrorCode["PreviousSnapshotOperationNotSupported"] = "PreviousSnapshotOperationNotSupported";
    StorageErrorCode["SequenceNumberConditionNotMet"] = "SequenceNumberConditionNotMet";
    StorageErrorCode["SequenceNumberIncrementTooLarge"] = "SequenceNumberIncrementTooLarge";
    StorageErrorCode["SnapshotCountExceeded"] = "SnapshotCountExceeded";
    StorageErrorCode["SnaphotOperationRateExceeded"] = "SnaphotOperationRateExceeded";
    StorageErrorCode["SnapshotsPresent"] = "SnapshotsPresent";
    StorageErrorCode["SourceConditionNotMet"] = "SourceConditionNotMet";
    StorageErrorCode["SystemInUse"] = "SystemInUse";
    StorageErrorCode["TargetConditionNotMet"] = "TargetConditionNotMet";
    StorageErrorCode["UnauthorizedBlobOverwrite"] = "UnauthorizedBlobOverwrite";
    StorageErrorCode["BlobBeingRehydrated"] = "BlobBeingRehydrated";
    StorageErrorCode["BlobArchived"] = "BlobArchived";
    StorageErrorCode["BlobNotArchived"] = "BlobNotArchived";
})(StorageErrorCode = exports.StorageErrorCode || (exports.StorageErrorCode = {}));
/**
 * Defines values for GeoReplicationStatusType.
 * Possible values include: 'live', 'bootstrap', 'unavailable'
 * @readonly
 * @enum {string}
 */
var GeoReplicationStatusType;
(function (GeoReplicationStatusType) {
    GeoReplicationStatusType["Live"] = "live";
    GeoReplicationStatusType["Bootstrap"] = "bootstrap";
    GeoReplicationStatusType["Unavailable"] = "unavailable";
})(GeoReplicationStatusType = exports.GeoReplicationStatusType || (exports.GeoReplicationStatusType = {}));
/**
 * Defines values for RehydratePriority.
 * Possible values include: 'High', 'Standard'
 * @readonly
 * @enum {string}
 */
var RehydratePriority;
(function (RehydratePriority) {
    RehydratePriority["High"] = "High";
    RehydratePriority["Standard"] = "Standard";
})(RehydratePriority = exports.RehydratePriority || (exports.RehydratePriority = {}));
/**
 * Defines values for PageBlobAccessTier.
 * Possible values include: 'P4', 'P6', 'P10', 'P15', 'P20', 'P30', 'P40', 'P50', 'P60', 'P70',
 * 'P80'
 * @readonly
 * @enum {string}
 */
var PageBlobAccessTier;
(function (PageBlobAccessTier) {
    PageBlobAccessTier["P4"] = "P4";
    PageBlobAccessTier["P6"] = "P6";
    PageBlobAccessTier["P10"] = "P10";
    PageBlobAccessTier["P15"] = "P15";
    PageBlobAccessTier["P20"] = "P20";
    PageBlobAccessTier["P30"] = "P30";
    PageBlobAccessTier["P40"] = "P40";
    PageBlobAccessTier["P50"] = "P50";
    PageBlobAccessTier["P60"] = "P60";
    PageBlobAccessTier["P70"] = "P70";
    PageBlobAccessTier["P80"] = "P80";
})(PageBlobAccessTier = exports.PageBlobAccessTier || (exports.PageBlobAccessTier = {}));
/**
 * Defines values for BlockListType.
 * Possible values include: 'committed', 'uncommitted', 'all'
 * @readonly
 * @enum {string}
 */
var BlockListType;
(function (BlockListType) {
    BlockListType["Committed"] = "committed";
    BlockListType["Uncommitted"] = "uncommitted";
    BlockListType["All"] = "all";
})(BlockListType = exports.BlockListType || (exports.BlockListType = {}));
/**
 * Defines values for DeleteSnapshotsOptionType.
 * Possible values include: 'include', 'only'
 * @readonly
 * @enum {string}
 */
var DeleteSnapshotsOptionType;
(function (DeleteSnapshotsOptionType) {
    DeleteSnapshotsOptionType["Include"] = "include";
    DeleteSnapshotsOptionType["Only"] = "only";
})(DeleteSnapshotsOptionType = exports.DeleteSnapshotsOptionType || (exports.DeleteSnapshotsOptionType = {}));
/**
 * Defines values for EncryptionAlgorithmType.
 * Possible values include: 'AES256'
 * @readonly
 * @enum {string}
 */
var EncryptionAlgorithmType;
(function (EncryptionAlgorithmType) {
    EncryptionAlgorithmType["AES256"] = "AES256";
})(EncryptionAlgorithmType = exports.EncryptionAlgorithmType || (exports.EncryptionAlgorithmType = {}));
/**
 * Defines values for ListBlobsIncludeItem.
 * Possible values include: '', 'copy', 'deleted', 'metadata', 'snapshots', 'uncommittedblobs',
 * 'tags', 'versions', 'deletedwithversions', 'immutabilitypolicy', 'legalhold', 'permissions'
 * @readonly
 * @enum {string}
 */
var ListBlobsIncludeItem;
(function (ListBlobsIncludeItem) {
    ListBlobsIncludeItem["EmptyString"] = "";
    ListBlobsIncludeItem["Copy"] = "copy";
    ListBlobsIncludeItem["Deleted"] = "deleted";
    ListBlobsIncludeItem["Metadata"] = "metadata";
    ListBlobsIncludeItem["Snapshots"] = "snapshots";
    ListBlobsIncludeItem["Uncommittedblobs"] = "uncommittedblobs";
    ListBlobsIncludeItem["Tags"] = "tags";
    ListBlobsIncludeItem["Versions"] = "versions";
    ListBlobsIncludeItem["Deletedwithversions"] = "deletedwithversions";
    ListBlobsIncludeItem["Immutabilitypolicy"] = "immutabilitypolicy";
    ListBlobsIncludeItem["Legalhold"] = "legalhold";
    ListBlobsIncludeItem["Permissions"] = "permissions";
})(ListBlobsIncludeItem = exports.ListBlobsIncludeItem || (exports.ListBlobsIncludeItem = {}));
/**
 * Defines values for ListContainersIncludeType.
 * Possible values include: '', 'metadata', 'deleted'
 * @readonly
 * @enum {string}
 */
var ListContainersIncludeType;
(function (ListContainersIncludeType) {
    ListContainersIncludeType["EmptyString"] = "";
    ListContainersIncludeType["Metadata"] = "metadata";
    ListContainersIncludeType["Deleted"] = "deleted";
})(ListContainersIncludeType = exports.ListContainersIncludeType || (exports.ListContainersIncludeType = {}));
/**
 * Defines values for PathRenameMode.
 * Possible values include: 'legacy', 'posix'
 * @readonly
 * @enum {string}
 */
var PathRenameMode;
(function (PathRenameMode) {
    PathRenameMode["Legacy"] = "legacy";
    PathRenameMode["Posix"] = "posix";
})(PathRenameMode = exports.PathRenameMode || (exports.PathRenameMode = {}));
/**
 * Defines values for SequenceNumberActionType.
 * Possible values include: 'max', 'update', 'increment'
 * @readonly
 * @enum {string}
 */
var SequenceNumberActionType;
(function (SequenceNumberActionType) {
    SequenceNumberActionType["Max"] = "max";
    SequenceNumberActionType["Update"] = "update";
    SequenceNumberActionType["Increment"] = "increment";
})(SequenceNumberActionType = exports.SequenceNumberActionType || (exports.SequenceNumberActionType = {}));
/**
 * Defines values for SkuName.
 * Possible values include: 'Standard_LRS', 'Standard_GRS', 'Standard_RAGRS', 'Standard_ZRS',
 * 'Premium_LRS'
 * @readonly
 * @enum {string}
 */
var SkuName;
(function (SkuName) {
    SkuName["StandardLRS"] = "Standard_LRS";
    SkuName["StandardGRS"] = "Standard_GRS";
    SkuName["StandardRAGRS"] = "Standard_RAGRS";
    SkuName["StandardZRS"] = "Standard_ZRS";
    SkuName["PremiumLRS"] = "Premium_LRS";
})(SkuName = exports.SkuName || (exports.SkuName = {}));
/**
 * Defines values for AccountKind.
 * Possible values include: 'Storage', 'BlobStorage', 'StorageV2'
 * @readonly
 * @enum {string}
 */
var AccountKind;
(function (AccountKind) {
    AccountKind["Storage"] = "Storage";
    AccountKind["BlobStorage"] = "BlobStorage";
    AccountKind["StorageV2"] = "StorageV2";
})(AccountKind = exports.AccountKind || (exports.AccountKind = {}));
/**
 * Defines values for SyncCopyStatusType.
 * Possible values include: 'success'
 * @readonly
 * @enum {string}
 */
var SyncCopyStatusType;
(function (SyncCopyStatusType) {
    SyncCopyStatusType["Success"] = "success";
})(SyncCopyStatusType = exports.SyncCopyStatusType || (exports.SyncCopyStatusType = {}));
//# sourceMappingURL=models.js.map